{% extends "template/base.tera" %}
{% block head %}
    {{ super() }}
    <style>
        body {
            display: flex;
            position: absolute;
            width: 100%;
            height: 100%;
        }

        .gradient-custom {
            /* fallback for old browsers */
            background: #6a11cb;

            /* Chrome 10-25, Safari 5.1-6 */
            background: -webkit-linear-gradient(to right, rgba(106, 17, 203, 1), rgba(37, 117, 252, 1));

            /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
            background: linear-gradient(to right, rgba(106, 17, 203, 1), rgba(37, 117, 252, 1));
        }

        @media (min-width: 576px) {
            .login-card {
                width: 400px;
            }
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/@zxcvbn-ts/core@2.0.0/dist/zxcvbn-ts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@zxcvbn-ts/language-common@2.0.0/dist/zxcvbn-ts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@zxcvbn-ts/language-en@2.0.0/dist/zxcvbn-ts.js"></script>
{% endblock %}
{% block body %}
    <div class="w-100 h-100 gradient-custom d-flex align-items-center">
        <div class="card mx-auto shadow-sm login-card">
            <div class="card-header">
                <h3>Tusk server</h3>
            </div>
            <div class="card-body">
                <h4 class="mb-3">Password reset</h4>
                <p>Choose a new password for your account.</p>
                <form name="password_reset" class="needs-validation" action="javascript:on_password_change_confirm()" novalidate>
                    {% if get["token"] %}
                    <input type="hidden" name="token" value={{ get["token"] | urlencode }}>
                    {% endif %}
                    <div class="form-floating mb-3">
                        <input type="password" name="password_new" class="form-control" placeholder="password" oninput="on_password_change_password_new_input(this)" required>
                        <label for="inputPassword" class="form-label">Password</label>
                        <div class="progress mt-3" role="progressbar">
                            <div id="password_change_pg_strength_value" class="progress-bar bg-alert w-0"></div>
                        </div>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="password" name="password_repeat" class="form-control" placeholder="password" required>
                        <label for="inputPassword" class="form-label">Repeat password</label>
                    </div>
                    <p>The new password should be at least 8 characters long. Only strong passwords are allowed.</p>
                    <div id="password_change_warning_container"></div>
                    <div id="password_change_alert_container"></div>
                    <div id="formAlertContainer"></div>
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
        //let input_username = document.getElementById("username");
        //input_username.value = document['username'];

        const password_check_options = {
            translations: zxcvbnts['language-en'].translations,
            graphs: zxcvbnts['language-common'].adjacencyGraphs,
            dictionary: {
                ...zxcvbnts['language-common'].dictionary,
                ...zxcvbnts['language-en'].dictionary
            }
        };
        zxcvbnts.core.zxcvbnOptions.setOptions(password_check_options);

        function password_change_show_warning(message) {
            let alert_content = `<div class="alert alert-warning alert-dismissible" role="alert">${message}</div>`;
            let alert_container = document.querySelector("#password_change_warning_container");
            if (message.length > 0) {
                alert_container.innerHTML = alert_content;
            } else {
                alert_container.innerHTML = "";
            }
        }

        function password_change_show_alert(message, kind="danger") {
            let alert_content = `<div class="alert alert-${kind} alert-dismissible" role="alert">${message}</div>`;
            let alert_container = document.querySelector("#password_change_alert_container");
            if (message.length > 0) {
                alert_container.innerHTML = alert_content;
            } else {
                alert_container.innerHTML = "";
            }
        }

        function on_password_change_password_new_input(sender) {
            let last_value = sender.value;
            let score = zxcvbnts.core.zxcvbn(last_value, ["Tusk"]);
            let strength_bar = document.getElementById("password_change_pg_strength_value");

            setTimeout(() => {
                if (last_value !== sender.value) return;

                if (score.feedback.warning === "" && score.feedback.suggestions.length === 0) {
                    password_change_show_warning("");
                } else {
                    let score_message = score.feedback.warning;
                    if (score_message !== "") score_message += "<br/><br/>";
                    score_message += score.feedback.suggestions
                        .map((suggestion) => `<b>Suggestion:</b> ${suggestion}`)
                        .join("<br/>");
                    password_change_show_warning(score_message);
                }
            }, 500);

            strength_bar.classList.remove("w-0", "w-25", "w-50", "w-75", "w-100");
            strength_bar.classList.remove("bg-success", "bg-warning", "bg-danger");

            switch (score.score) {
                case 0:
                    strength_bar.classList.add("w-0", "bg-danger");
                    break;
                case 1:
                    strength_bar.classList.add("w-25", "bg-danger");
                    break;
                case 2:
                    strength_bar.classList.add("w-50", "bg-warning");
                    break;
                case 3:
                    strength_bar.classList.add("w-75", "bg-warning");
                    break;
                case 4:
                    strength_bar.classList.add("w-100", "bg-success");
                    break;
            }

        }

        function on_password_change_confirm() {
            let form = document.forms.namedItem("password_reset");

            if (form['password_new'].value !== form['password_repeat'].value) {
                password_change_show_alert("The two passwords do not match.");
                form["password_new"].classList.add("is-invalid");
                form["password_repeat"].classList.add("is-invalid");
                return;
            }

            let data = JSON.stringify({ "password": form["password_new"].value, "proof": {{ get["token"] | json_encode }}, "proof_type": "token" })

            fetch(`/v1/users/${document['username']}`, {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json"
                },
                body: data
            }).then((res) => {
                if (res.status === 401) {
                    password_change_show_alert("A problem occurred with authentication.");
                } else if (res.status === 200) {
                    password_change_show_alert(`Success!<br/><br/>Now you will be redirected to the login screen.`, "success");
                    setTimeout(() => window.location.href = "/login", 3000);
                }
            });
        }
    </script>
{% endblock %}